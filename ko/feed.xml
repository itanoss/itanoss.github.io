<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="ko"><generator uri="https://jekyllrb.com/" version="3.8.7">Jekyll</generator><link href="https://blog.itanoss.kr/ko/feed.xml" rel="self" type="application/atom+xml" /><link href="https://blog.itanoss.kr/ko/" rel="alternate" type="text/html" hreflang="ko" /><updated>2020-07-30T22:56:30+09:00</updated><id>https://blog.itanoss.kr/ko/feed.xml</id><title type="html">Joonhyeok Im</title><subtitle>Software development blog written by Joonhyeok Im</subtitle><entry><title type="html">Gradle 모듈에 대한 데메테르 법칙</title><link href="https://blog.itanoss.kr/ko/gradle-%EB%AA%A8%EB%93%88%EC%97%90-%EB%8C%80%ED%95%9C-%EB%8D%B0%EB%A9%94%ED%85%8C%EB%A5%B4-%EB%B2%95%EC%B9%99/" rel="alternate" type="text/html" title="Gradle 모듈에 대한 데메테르 법칙" /><published>2020-07-30T00:00:00+09:00</published><updated>2020-07-30T00:00:00+09:00</updated><id>https://blog.itanoss.kr/ko/gradle-module-dip</id><content type="html" xml:base="https://blog.itanoss.kr/ko/gradle-%EB%AA%A8%EB%93%88%EC%97%90-%EB%8C%80%ED%95%9C-%EB%8D%B0%EB%A9%94%ED%85%8C%EB%A5%B4-%EB%B2%95%EC%B9%99/">&lt;p&gt;누군가(어쩌면 동료)가 만든 모듈을 참조하기로 결정하면 다음과 같은 오류를 만나는 경우가 있습니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Cannot access class 'retrofit2.Response'. Check your module classpath 
for missing or conflicting dependencies
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;도입&quot;&gt;도입&lt;/h1&gt;

&lt;p&gt;관련 의존성을 찾을 수 없는 이유는 프로젝트의 참조로 설정된 의존성의 API 노출 영역에 서드파티 의존성이 노출되었기 때문입니다. 다시 말하면, API 노출 영역에 &lt;code class=&quot;highlighter-rouge&quot;&gt;implementation&lt;/code&gt; 의존성과 같은 다른 의존성이 있고 클라이언트가 해당 API에 호출하면 위와 같이 의존성 문제가 생기게 됩니다.&lt;/p&gt;

&lt;p&gt;샘플 프로젝트로 저장소 서비스가 있는 라이브러리를 사용하는 컨트롤러가 있다고 해봅시다. 사용하려는 메서드는 retrofit의 &lt;code class=&quot;highlighter-rouge&quot;&gt;Response&lt;/code&gt; 클래스를 의존하고 있습니다.&lt;/p&gt;

&lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/mermaid/8.6.4/mermaid.min.js&quot;&gt;&lt;/script&gt;
&lt;div class=&quot;mermaid&quot;&gt;
classDiagram
  RepositoryService ..&amp;gt; Response
  UserController o-- RepositoryService
  class RepositoryService{
    &amp;lt;&amp;lt;dependency&amp;gt;&amp;gt;
    +findRepositories() Response~RepoList~
  }
  class UserController{
    &amp;lt;&amp;lt;our_project&amp;gt;&amp;gt;
    listAllRepositoryNames(String username)
  }
  &amp;lt;&amp;lt;transitive_dependency&amp;gt;&amp;gt; Response
&lt;/div&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;findRepositories&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;username&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;retrofit2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Repo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;혹할만한-해결책&quot;&gt;혹할만한 해결책&lt;/h1&gt;

&lt;p&gt;먼저, 클라이언트에서 참조하는 의존성의 코드를 수정할 수 없다면, 해당 의존성의 의존성 (영어로는 Transitive dependency라고 표현합니다)을 직접 의존성으로 추가해서 클래스 오류를 피할 수 있기는 합니다.&lt;/p&gt;

&lt;div class=&quot;language-gradle highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// your_project/build.gradle&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;dependencies&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;implementation&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;com.squareup.retrofit2:retrofit:${retrofitVersion}&quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;그러나 몇 가지 문제가 있습니다. 일단 주먹구구식으로 해결하는 방식입니다. 해당 의존성에 어떤 의존성이 얼마나 필요한지 정확히 알 수가 없기 떄문에 의존성 문제가 없어질 때까지 계속해서 의존성을 추가해야 합니다. 그리고 클라이언트 입장에서 관련된 모든 의존성을 알아야 하므로 좋지 않은 모듈 설계에 해당한다. 결국 관리해야 하는 의존성이 많아질수록, 프로젝트를 관리하기가 힘들어지고, 이는 품질을 해치고 복잡도를 높이게 됩니다.&lt;/p&gt;

&lt;p&gt;두 번째 방법으로, 해당 의존성을 수정할 수 있으면, 참조하는 의존성을 Gradle에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;api&lt;/code&gt;로 추가할 수도 있습니다. &lt;code class=&quot;highlighter-rouge&quot;&gt;implementation&lt;/code&gt;과 &lt;code class=&quot;highlighter-rouge&quot;&gt;api&lt;/code&gt;의 차이에 대해 자세히 알고 싶으면 &lt;a href=&quot;https://docs.gradle.org/current/userguide/java_library_plugin.html#sec:java_library_separation&quot;&gt;공식 설명서&lt;/a&gt;가 읽기 가장 좋습니다.&lt;/p&gt;

&lt;div class=&quot;language-gradle highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// dependency/build.gradle&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;plugins&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'java-library'&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;dependencies&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;api&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;com.squareup.retrofit2:retrofit:${retrofitVersion}&quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;데메테르-법칙&quot;&gt;데메테르&lt;sup id=&quot;fnref:0&quot;&gt;&lt;a href=&quot;#fn:0&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; 법칙&lt;/h1&gt;

&lt;p&gt;데메테르 법칙에 대한 글은 인터넷에 수도 없이 많습니다. 간단히 설명하면, 클래스 간에 낮은 결합도를 달성하는 설계 가이드라인입니다. 이 가이드라인은 다음과 같은 특성이 있습니다.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;각 단위는 다른 단위(현재 단위와 “밀접하게” 관련된 단위)에 대해 제한된 지식만 가지고 있어야 한다.&lt;/li&gt;
    &lt;li&gt;각 단위는 친구하고만 이야기해야 한다. 모르는 사람과 이야기하지 않는다.&lt;/li&gt;
    &lt;li&gt;가까운 친구하고만 이야기한다. &lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;위 모듈 문제는 데메테르 법칙 위반이라고 할 수 있습니다. 이는 다시 클린 코드에서 정확히 설명된 부분입니다&lt;sup id=&quot;fnref:2&quot;&gt;&lt;a href=&quot;#fn:2&quot; class=&quot;footnote&quot;&gt;3&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;h4 id=&quot;g36-추이적-탐색을-피하라&quot;&gt;G36: 추이적 탐색을 피하라&lt;/h4&gt;

  &lt;p&gt;일반적으로 한 모듈은 주변 모듈을 모를수록 좋다. 좀 더 구체적으로, A가 B를 사용하고 B가 C를 사용한다 하더라도 A가 C를 알아야 할 필요는 없다는 뜻이다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;진정한-해결책&quot;&gt;진정한 해결책&lt;/h1&gt;

&lt;p&gt;다시 말하자면, 라이브러리는 통제권이 있으면 좋은 클래스 설계로 개선할 수 있습니다. 가이드라인을 따르면 샘플 프로젝트의 클라이언트 모듈은 retrofit의 어떤 클래스도 알 필요가 없습니다. 대상 메서드(API)의 목적을 다시 생각해보시길 바랍니다. 클라이언트에게 꼭 필요한 것이 무엇인지를 고민해보세요.&lt;/p&gt;

&lt;p&gt;샘플 프로젝트에서는 클라이언트가 응답의 내용(레파지토리 리스트)에만 관심이 있습니다. 응답 상태에 대해서는 신경쓰지 않습니다. 결과를 성공적으로 얻었는지 여부를 결정하기 위해서만 응답을 사용하고 있습니다.&lt;/p&gt;

&lt;p&gt;따라서 메소드는 레파지토리 리스트를 리턴하거나, 잘못되면 예외를 던지기만 하면 됩니다. 간단합니다.&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;findRepositories&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;username&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Repo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이제 클라이언트는 관심있는 구조에 집중할 수 있습니다. 샘플 프로젝트의 전체 소스 코드가 궁금하시면, &lt;a href=&quot;https://github.com/itanoss/blog-examples/tree/master/law-of-demeter-for-gradle-modules&quot;&gt;Github&lt;/a&gt;를 참고해주세요.&lt;/p&gt;

&lt;p&gt;다른 방법으로, &lt;code class=&quot;highlighter-rouge&quot;&gt;retrofit2.Response&amp;lt;List&amp;lt;Repo&amp;gt;&amp;gt;&lt;/code&gt; 대신 &lt;code class=&quot;highlighter-rouge&quot;&gt;List&amp;lt;Repo&amp;gt;&lt;/code&gt;을 래핑한 어떤 클래스를 만들 수도 있습니다. 응답 중에서 라이브러리가 노출해도 괜찮은 정보를 클라이언트가 원하는 경우, 이 방법이 적절합니다. 예를 들어 위와 같은 목표(정보 획득이 성공적인지 여부)라면 단순히 리턴 타입을 &lt;code class=&quot;highlighter-rouge&quot;&gt;Optional&amp;lt;List&amp;lt;Repo&amp;gt;&amp;gt;&lt;/code&gt;로 사용할 수도 있습니다.&lt;/p&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:0&quot;&gt;
      &lt;p&gt;‘디미터’라고 표기하기도 하지만, &lt;a href=&quot;http://kornorms.korean.go.kr/example/exampleList.do&quot;&gt;국립국어원 외래어 표기법 한국어 어문 규범&lt;/a&gt;에 따라 ‘데메테르’로 표기하겠습니다. &lt;a href=&quot;#fnref:0&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:1&quot;&gt;
      &lt;p&gt;원문 &lt;a href=&quot;https://en.wikipedia.org/wiki/Law_of_Demeter&quot;&gt;위키피디아&lt;/a&gt; &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:2&quot;&gt;
      &lt;p&gt;로버트 C. 마틴의  『클린 코드』(인사이트, 2013) 중 17장의 G36 참조 &lt;a href=&quot;#fnref:2&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;</content><author><name></name></author><category term="Java" /><category term="Gradle" /><category term="Software Engineering" /><summary type="html">누군가(어쩌면 동료)가 만든 모듈을 참조하기로 결정하면 다음과 같은 오류를 만나는 경우가 있습니다.</summary></entry><entry><title type="html">스프링 커스텀 어노테이션</title><link href="https://blog.itanoss.kr/ko/%EC%8A%A4%ED%94%84%EB%A7%81-%EC%BB%A4%EC%8A%A4%ED%85%80-%EC%96%B4%EB%85%B8%ED%85%8C%EC%9D%B4%EC%85%98/" rel="alternate" type="text/html" title="스프링 커스텀 어노테이션" /><published>2019-11-01T00:00:00+09:00</published><updated>2019-11-01T00:00:00+09:00</updated><id>https://blog.itanoss.kr/ko/spring-custom-annotation</id><content type="html" xml:base="https://blog.itanoss.kr/ko/%EC%8A%A4%ED%94%84%EB%A7%81-%EC%BB%A4%EC%8A%A4%ED%85%80-%EC%96%B4%EB%85%B8%ED%85%8C%EC%9D%B4%EC%85%98/">&lt;p&gt;스프링에서 조건에 따라 활성화될 Bean이나 다른 설정값들을 조정하는 니즈는 다들 많이 있으리라 생각됩니다. 사내 프로젝트 중에서도 여러 서비스들을 공통적으로 활성화시킬 Bean들이 꽤 많았습니다. 그럴 때 어떻게 중복을 줄이고 리팩토링을 할 수 있을까요? 제가 꺼낸 답은 &lt;strong&gt;어노테이션&lt;/strong&gt;이었습니다.&lt;/p&gt;

&lt;h1 id=&quot;예제&quot;&gt;예제&lt;/h1&gt;

&lt;p&gt;예제로, APM(Application Performance Logging) 기능 중 하나로, 특정 메소드의 실행 시간을 log로 남기고 싶다고 가정해봅시다.&lt;/p&gt;

&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;repository&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ItemRepository&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@LogExecutionTime&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;loadItems&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;criteria&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ItemFetchCriteria&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;//...&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;@LogExecutionTime&lt;/code&gt; 어노테이션으로 표시된 메소드, 즉 &lt;code class=&quot;highlighter-rouge&quot;&gt;loadItems&lt;/code&gt; 메소드의 실행 시간을 표준 출력으로 표시해보려면 Spring AOP로 간단히 구현될 수 있습니다.&lt;/p&gt;
&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Aspect&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;LogExeucutionTimeApsect&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Around&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;@annotation(LogExecutionTime)&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;logExecutionTime&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pjp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ProceedingJoinPoint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Any&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;signature&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pjp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;signature&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;typeName&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;signature&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;declaringType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;simpleName&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;methodName&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;signature&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;start&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;currentTimeMillis&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pjp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;proceed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;finally&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;kd&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;py&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;currentTimeMillis&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;nf&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;%s.%s execution time : %dms&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;typeName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;methodName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;end&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;아, 물론 Configuration에 활성화 어노테이션도 달아줘야 합니다.&lt;/p&gt;
&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Configuration&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@EnableAspectJAutoProxy&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// AOP is enabled&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;YourAppConfiguration&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Bean&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;performanceLoggingAspect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;PerformanceLoggingAspect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이제 잘 작동하겠네요. 간단한 예제였지만, 관련 프로젝트에 이 코드 블록을 복붙 하는 것은 개발자로써 옳지 않아보입니다. (&lt;em&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;println&lt;/code&gt; 대신 &lt;a href=&quot;http://www.slf4j.org/&quot;&gt;slf4j&lt;/a&gt;와 같은 logging framework을 사용하고, &lt;a href=&quot;https://www.fluentd.org/&quot;&gt;fluentd&lt;/a&gt;나 &lt;a href=&quot;https://www.elastic.co/guide/en/logstash/current/getting-started-with-logstash.html&quot;&gt;logstash&lt;/a&gt;, &lt;a href=&quot;https://www.elastic.co/guide/en/beats/filebeat/current/filebeat-getting-started.html&quot;&gt;filebeat&lt;/a&gt; 대신 직접 API를 호출한다고 할 때, &lt;a href=&quot;https://square.github.io/retrofit/&quot;&gt;Retrofit&lt;/a&gt;이나 &lt;a href=&quot;https://github.com/OpenFeign/feign&quot;&gt;Feign&lt;/a&gt; 등의 설정을 더 추가하면 코드는 더 많아지겠네요.&lt;/em&gt;)&lt;/p&gt;

&lt;p&gt;이 녀석들을 wrapping해서 아래와 같은 단일한 어노테이션으로 도출하고, 이를 사용하는 프로젝트에서는 dependency만 참조하는 식으로 리팩토링하고자 합니다.&lt;/p&gt;
&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@SpringBootApplication&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@EnablePerformanceLogging&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;YourApp&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;import-어노테이션-활용법&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;@Import&lt;/code&gt; 어노테이션 활용법&lt;/h1&gt;

&lt;p&gt;&lt;a href=&quot;https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/context/annotation/Import.html&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;@Import&lt;/code&gt;&lt;/a&gt; 어노테이션은 스프링 빈 설정을 자유롭게 할 수 있는데 도움을 줍니다. 일반적으로 &lt;code class=&quot;highlighter-rouge&quot;&gt;@Configuration&lt;/code&gt; 클래스들을 컨텍스트로 로드하지만, 경우에 따라서 컴포넌트 자체를 로드하거나, &lt;a href=&quot;https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/context/annotation/ImportSelector.html&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ImportSelector&lt;/code&gt;&lt;/a&gt;로 조건에 따라 서로 다른 &lt;code class=&quot;highlighter-rouge&quot;&gt;Configuration&lt;/code&gt;을 로드할 수도 있습니다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;@Import&lt;/code&gt; 어노테이션을 이용해서 위에서 기술된 &lt;code class=&quot;highlighter-rouge&quot;&gt;YourAppConfiguration&lt;/code&gt;을 활성화시켜보고자 합니다. 다음과 같이 설계해봅니다.&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Main-Class&lt;/code&gt; 인 &lt;code class=&quot;highlighter-rouge&quot;&gt;YourApp&lt;/code&gt;에 어노테이트된 &lt;code class=&quot;highlighter-rouge&quot;&gt;@EnablePerformanceLogging&lt;/code&gt;을 로드합니다.&lt;/li&gt;
  &lt;li&gt;해당 어노테이션에 &lt;code class=&quot;highlighter-rouge&quot;&gt;@Import&lt;/code&gt;로 기술된 Configuration을 로드합니다.&lt;/li&gt;
  &lt;li&gt;Configuration에 기술된 &lt;code class=&quot;highlighter-rouge&quot;&gt;@EnableAspectJAutoProxy&lt;/code&gt;로 AOP를 활성화하고, Aspect를 Bean으로 로드합니다.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;즉, &lt;code class=&quot;highlighter-rouge&quot;&gt;@EnablePerformanceLogging&lt;/code&gt; 어노테이션과 관련된 Configuration 클래스는 아래와 같이 간단히 구현될 수 있습니다.&lt;/p&gt;
&lt;div class=&quot;language-kotlin highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@Target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;AnnotationTarget&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;CLASS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@Retention&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;AnnotationRetention&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;RUNTIME&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@Import&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;PerformanceLoggingConfiguration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;annotation&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;EnablePerformanceLogging&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;@EnableAspectJAutoProxy&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;PerformanceLoggingConfiguration&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Bean&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;fun&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;aspect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;PerformanceLoggingAspect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이제 남은 일은 관련 클래스들을 하나의 java library로 package하는 일만 남았습니다.&lt;/p&gt;

&lt;p&gt;예제 코드는 &lt;a href=&quot;https://github.com/itanoss/blog-examples/blob/master/spring-custom-annotation&quot;&gt;여기&lt;/a&gt;를 참조하세요. 실행 예제는 아래와 같습니다.&lt;/p&gt;

&lt;script type=&quot;text/javascript&quot; src=&quot;https://asciinema.org/a/278065.js&quot; id=&quot;asciicast-278065&quot; async=&quot;async&quot;&gt;&lt;/script&gt;</content><author><name></name></author><category term="Java" /><summary type="html">스프링에서 조건에 따라 활성화될 Bean이나 다른 설정값들을 조정하는 니즈는 다들 많이 있으리라 생각됩니다. 사내 프로젝트 중에서도 여러 서비스들을 공통적으로 활성화시킬 Bean들이 꽤 많았습니다. 그럴 때 어떻게 중복을 줄이고 리팩토링을 할 수 있을까요? 제가 꺼낸 답은 어노테이션이었습니다.</summary></entry><entry><title type="html">블로그 마이그레이션</title><link href="https://blog.itanoss.kr/ko/blog-migration/" rel="alternate" type="text/html" title="블로그 마이그레이션" /><published>2018-08-16T18:35:14+09:00</published><updated>2018-08-16T18:35:14+09:00</updated><id>https://blog.itanoss.kr/ko/blog-migration</id><content type="html" xml:base="https://blog.itanoss.kr/ko/blog-migration/">&lt;p&gt;그동안 많은 변화가 있었습니다. 직장도 옮기고, 직장을 옮기면서 기술 스택들도 약간의 변화가 있었고, 개인적으로 가장이 되고, 한 아이의 아빠도 되었습니다. 많은 것들이 변화하였지만, 제 블로그는 여전히 낡은 것 같아서 그동안 미루다가 이제야 플랫폼 전환을 하게 되었습니다.&lt;/p&gt;

&lt;p&gt;블로그를 jekyll로 옮기게 된 이유는 여러가지 였습니다.&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;wordpress db인 mysql을 운영하는데 여러가지 운영 비용이 발생했습니다. EC2 t2.micro로 이것저것 동시에 운영하거나 관리가 부재해서 예기치 못한 오류들이 많이 발생했습니다. 더욱이 버전 업데이트 목적인 버그들이 업데이트 부재로 인해 실제 운영환경에서 많이 목격되었습니다. db 를 주기적으로 백업하는 스케쥴링은 되어 있지만 이 역시 운영 비용으로 판단되고, 스토리지도 무시할 수 없었습니다.&lt;/li&gt;
  &lt;li&gt;해킹 공격이 상당했습니다. 중국발 brute-force login 시도로 인해 db가 죽는 상황이 자주 발생했습니다. fail2van 플러그인으로 1차적으로 방어하였습니다만, 창과 방패의 상황은 여전했습니다. 치명적인 데이터가 있는 것은 아니었지만, 그래도 작성한 소중한 글들을 지키는데 있어,  wordpress의 보안취약성에 의존할 수 밖에 없는 상황도 불안하게 만들었습니다.&lt;/li&gt;
  &lt;li&gt;글 작성하는데 있어, markdown으로 빠르게 작성하고 싶었습니다. 워드프레스에 들어가서 wysiwyg 에디터로 작성하는 것보다 로컬 코드 에디터에서 작성하고 필요한 시점에 블로그에 반영하고 있었습니다. 굳이 핑계대자면 글이 뜸한 이유도 여기에 한 몫 한다고 말씀드리고 싶네요. 😛&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;db와 운영에서 자유로울 수 있는 방법은 cdn처럼 정적 파일 호스팅이 어떨까 하는 생각을 했고, 마침 떠오른 생각은 static html generator였습니다. jekyll과 hugo 를 고민했지만, Github Pages가 지원하는 jekyll을 선택하기로 했습니다.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;그동안 썼던 타이틀도 이직을 하고, 보다 세상을 넓게 보면서 부끄러워지게 되었습니다. 이전 회사에서 주니어였을 때 한 선배가 이렇게 말했습니다.&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;“넌 너무 깊게 파고만 드는 경향이 있어.”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;제가 맡은 업무 상 다양한 기술과 플랫폼에 익숙해져야 했고, 불가능해 보이는 것을 가능하게 해야했고, 옳지 않아 보이는 것을 옳게 만들고자 노력했습니다. 그러다보니 디테일을 중요하게 생각했고, 시간을 많이 들여서 탐구했습니다. 그 과정에서 생각이 들었던 내용들을 담는 자리가 이 블로그라는 생각을 했습니다만, 특정 회사의 주니어가 아닌 개발자 한사람으로서 더 넓은 시야로 본 제 모습은 탐구했던 깊이가 결코 깊지 않았던 것을 깨닫게 되었습니다. 때문에 &lt;del&gt;넓게 깊은 개발 이야기&lt;/del&gt; 가 아닌 개발자 한 사람의 블로그로 rename하고자 합니다.&lt;/p&gt;

&lt;p&gt;겸손한 자세로 글을 이어나가겠습니다. 거듭 블로그를 읽어주셔서 늘 감사드립니다! 😊&lt;/p&gt;</content><author><name></name></author><category term="사는 이야기" /><summary type="html">그동안 많은 변화가 있었습니다. 직장도 옮기고, 직장을 옮기면서 기술 스택들도 약간의 변화가 있었고, 개인적으로 가장이 되고, 한 아이의 아빠도 되었습니다. 많은 것들이 변화하였지만, 제 블로그는 여전히 낡은 것 같아서 그동안 미루다가 이제야 플랫폼 전환을 하게 되었습니다.</summary></entry><entry><title type="html">한글 유니코드 정리</title><link href="https://blog.itanoss.kr/ko/%ED%95%9C%EA%B8%80-%EC%9C%A0%EB%8B%88%EC%BD%94%EB%93%9C-%EC%A0%95%EB%A6%AC/" rel="alternate" type="text/html" title="한글 유니코드 정리" /><published>2018-05-21T09:44:14+09:00</published><updated>2018-05-21T09:44:14+09:00</updated><id>https://blog.itanoss.kr/ko/ed959ceab880-ec9ca0eb8b88ecbd94eb939c-eca095eba6ac</id><content type="html" xml:base="https://blog.itanoss.kr/ko/%ED%95%9C%EA%B8%80-%EC%9C%A0%EB%8B%88%EC%BD%94%EB%93%9C-%EC%A0%95%EB%A6%AC/">&lt;p&gt;한글만 받는다는 유스케이스를 위해 Validation 처리를 할 때 정규식으로 처리하는 것이 가장 쉬운 방법일 것입니다. character set에 정의된 문자로 비교할텐데 &lt;strong&gt;유니코드&lt;/strong&gt;에 정의된 한글의 범위는 다음과 같습니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;ㄱ : U+3131&lt;/li&gt;
  &lt;li&gt;ㅎ : U+314E&lt;/li&gt;
  &lt;li&gt;ㅏ : U+314F&lt;/li&gt;
  &lt;li&gt;ㅣ : U+3163&lt;/li&gt;
  &lt;li&gt;가 : U+AC00&lt;/li&gt;
  &lt;li&gt;힣 : U+D7A3&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;따라서 자음, 모음만 독립적으로 입력을 허용하면 위 범위의 전체를:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/[ㄱ-ㅣ|가-힣]/
/[\u3131-\u3163|\uAC00-\uD7A3]/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;음절로 완성될 수 있게만 입력을 허용하면:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/[가-힣]/
/[\uAC00-\uD7A3]/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이런식으로 정리될 수 있겠습니다.&lt;/p&gt;</content><author><name></name></author><category term="프로그래밍" /><summary type="html">한글만 받는다는 유스케이스를 위해 Validation 처리를 할 때 정규식으로 처리하는 것이 가장 쉬운 방법일 것입니다. character set에 정의된 문자로 비교할텐데 유니코드에 정의된 한글의 범위는 다음과 같습니다.</summary></entry><entry><title type="html">Mocking in python unittest</title><link href="https://blog.itanoss.kr/ko/mocking-in-python-unittest/" rel="alternate" type="text/html" title="Mocking in python unittest" /><published>2017-06-28T16:50:01+09:00</published><updated>2017-06-28T16:50:01+09:00</updated><id>https://blog.itanoss.kr/ko/mocking-in-python-unittest</id><content type="html" xml:base="https://blog.itanoss.kr/ko/mocking-in-python-unittest/">&lt;p&gt;자바에서 &lt;a href=&quot;http://site.mockito.org/&quot;&gt;mockito&lt;/a&gt;를 이용해서 단위 테스트에 있어 복잡한 참조 관계를 잘 떨어뜨려서 우리가 원하는 목적에 맞는 테스트를 작성할 수 있었습니다. 예를 들면 아래 같은 녀석이 그렇죠.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@RunWith&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;MockitoJunitRunner&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;DeveloperTest&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Mock&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;ProductManager&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mockPM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Mock&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;Designer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mockDesigner&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;nc&quot;&gt;Developer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;subject&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Developer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Before&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setUp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;subject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;workWith&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mockPM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;subject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;workWith&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mockDesigner&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;testWriteWebPage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;when&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mockPM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;writeAcceptanceCriteria&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;anyString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;thenReturn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Nice AC&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;when&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mockDesigner&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;drawPage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;anyString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;thenReturn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Drawing&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
        
        &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;page&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;subject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;writeWebPage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;story-1&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;assertThat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;page&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;startWith&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&amp;lt;!doctype html&amp;gt;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;endWith&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&amp;lt;/html&amp;gt;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;verify&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mockPM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;writeAcceptanceCriteria&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;eq&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;story-1&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;verify&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mockDesigner&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;drawPage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;eq&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;story-1&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;실제 우리가 일하는 방식과 차이는 있습니다만, 일단 개발자가 일하기 위해선 주변 사람들이 도와준다는 가정입니다. &lt;code class=&quot;highlighter-rouge&quot;&gt;Developer&lt;/code&gt; 클래스는 &lt;code class=&quot;highlighter-rouge&quot;&gt;ProductManager&lt;/code&gt; 클래스와 &lt;code class=&quot;highlighter-rouge&quot;&gt;Designer&lt;/code&gt; 클래스에 의존하는데 &lt;code class=&quot;highlighter-rouge&quot;&gt;Developer&lt;/code&gt; 클래스의 &lt;code class=&quot;highlighter-rouge&quot;&gt;writeWebPage()&lt;/code&gt; 테스트할 때 의존 관계에 있는 클래스까지 참조하기 때문에 테스트가 실패하면 어디서 발생하는 지 모르는 문제점이 발생하게 됩니다.(부수 효과) 이를 위해서는 관심을 갖는(대상) 범위 외에 나머지를 제외시켜야할텐데 이 때 mocking을 쓰면 매우 적절하죠. 그럼 파이썬에서는 어떻게 할 수 있을까요?&lt;/p&gt;

&lt;h1 id=&quot;unittest-fundamentals&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;unittest&lt;/code&gt; fundamentals&lt;/h1&gt;

&lt;p&gt;파이썬에 &lt;a href=&quot;https://wiki.python.org/moin/PythonTestingToolsTaxonomy&quot;&gt;다양한 단위 테스트 프레임워크&lt;/a&gt;가 있지만 가장 기본인 &lt;a href=&quot;https://docs.python.org/3/library/unittest.html&quot;&gt;unittest&lt;/a&gt;를 기준으로 하면 다음과 같이 간단하게 작성할 수 있습니다.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;unittest&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TestCase&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;developer&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;subject&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;DeveloperTest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TestCase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;test_write_web_page&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;page&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;subject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;write_web_page&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'story-1'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;assertTrue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;page&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;startswith&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'&amp;lt;!doctype html&amp;gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;assertTrue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;page&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;endswith&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'&amp;lt;/html&amp;gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;TestCase 내에 assertTrue 외에도 다양한 함수가 있으니 &lt;a href=&quot;https://docs.python.org/3/library/unittest.html#unittest.TestCase&quot;&gt;여기&lt;/a&gt;를 참고해서 작성하면 됩니다.&lt;/p&gt;

&lt;h1 id=&quot;single-mock&quot;&gt;single mock&lt;/h1&gt;

&lt;p&gt;mock object를 한 개만 둘 때입니다.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;unittest&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TestCase&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;DeveloperTest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TestCase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;patch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'ProductManager.writeAcceptanceCriteria'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;test_write_web_page&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mock_ac&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;mock_ac&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;return_value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'a sophisticated ac'&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;page&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;subject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;write_web_page&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'story-1'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;assertTrue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;page&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;startswith&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'&amp;amp;lt;!doctype html&amp;amp;gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;assertTrue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;page&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;endswith&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'&amp;amp;lt;/html&amp;amp;gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;mock_ac&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;assert_called_with&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'a sophisticated ac'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;해당 테스트 케이스 함수에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;@mock.patch&lt;/code&gt; 데코레이터를 선언하여 mocking 대상이 되는 함수를 선언하고,&lt;/li&gt;
  &lt;li&gt;테스트 케이스 함수 파라미터를 지정합니다.&lt;/li&gt;
  &lt;li&gt;mocking 함수에 대해 결과값을 &lt;code class=&quot;highlighter-rouge&quot;&gt;mock_object.return_value = expected&lt;/code&gt; 형태로 선언하고,&lt;/li&gt;
  &lt;li&gt;대상 함수를 테스트 한 후 verify하는 시점에 &lt;code class=&quot;highlighter-rouge&quot;&gt;mock_object.assert_called_with(expected)&lt;/code&gt; 형태로 검증합니다.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;matcher-쓰기&quot;&gt;matcher 쓰기&lt;/h2&gt;

&lt;p&gt;자바 진영의 mockito에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;anyString()&lt;/code&gt;나 &lt;code class=&quot;highlighter-rouge&quot;&gt;any(classType)&lt;/code&gt;와 같이 매칭을 지정할 수도 있는데, unittest에도 &lt;code class=&quot;highlighter-rouge&quot;&gt;unittest.mock.ANY&lt;/code&gt;로 사용할 수 있습니다.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# second_param can be anything
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mock_object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;assert_called_with&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'first_param'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ANY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'third_param'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;multiple-mocks&quot;&gt;multiple mocks&lt;/h1&gt;

&lt;p&gt;mocking 대상이 두 개 이상일 때도 큰 차이는 없습니다만, 아래와 같이 &lt;strong&gt;데코레이터로 선언한 순서와 파라미터 순서가 반대&lt;/strong&gt;인 것만 주의하면 됩니다.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;unittest&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TestCase&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Drawing&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;DeveloperTest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TestCase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;patch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'ProductManager.writeAcceptanceCriteria'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;patch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Designer.drawPage'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;test_write_web_page&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mock_draw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mock_ac&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;mock_ac&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;return_value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'a sophisticated ac'&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;mock_draw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;return_value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'fake drawing'&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;page&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;subject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;write_web_page&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'story-1'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;assertTrue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;page&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;startswith&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'&amp;amp;lt;!doctype html&amp;amp;gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;assertTrue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;page&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;endswith&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'&amp;amp;lt;/html&amp;amp;gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;mock_ac&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;assert_called_with&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'a sophisticated ac'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;mock_draw&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;assert_called_with&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'fake drawing'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;multiple-calls&quot;&gt;multiple calls&lt;/h1&gt;

&lt;p&gt;하나의 함수에 대해 다양한 인자로 여러번 호출할 때에는 &lt;code class=&quot;highlighter-rouge&quot;&gt;assert_called_with&lt;/code&gt; 대신 &lt;a href=&quot;https://docs.python.org/3/library/unittest.mock.html#unittest.mock.Mock.assert_has_calls&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;assert_has_calls&lt;/code&gt;&lt;/a&gt;를 사용해야 합니다.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;unittest.mock&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;call&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;mock_ac&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;assert_has_calls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'a sophisticated ac'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'second ac'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;한계점&quot;&gt;한계점&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;assert_has_only_calls&lt;/code&gt; 와 같은 함수가 있다면, 해당 함수를 호출하는 인자를 정확하게 한정할 수 있을 것 같은데, 현재는 call count를 세고 &lt;code class=&quot;highlighter-rouge&quot;&gt;assert_has_calls&lt;/code&gt;로 검사하는 식으로 대안을 찾을 수 있습니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h4 id=&quot;reference&quot;&gt;Reference&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.voidspace.org.uk/python/mock/patch.html?highlight=stack#nesting-patch-decorators&quot;&gt;http://www.voidspace.org.uk/python/mock/patch.html?highlight=stack#nesting-patch-decorators&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.python.org/3/library/unittest.mock.html&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;unittest.mock&lt;/code&gt; Official Documentation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="Python" /><category term="mock" /><category term="python" /><category term="unittest" /><category term="단위테스트" /><summary type="html">자바에서 mockito를 이용해서 단위 테스트에 있어 복잡한 참조 관계를 잘 떨어뜨려서 우리가 원하는 목적에 맞는 테스트를 작성할 수 있었습니다. 예를 들면 아래 같은 녀석이 그렇죠.</summary></entry><entry><title type="html">ImageView에서 selector 사용하기</title><link href="https://blog.itanoss.kr/ko/imageview%EC%97%90%EC%84%9C-selector-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0/" rel="alternate" type="text/html" title="ImageView에서 selector 사용하기" /><published>2017-02-28T09:38:36+09:00</published><updated>2017-02-28T09:38:36+09:00</updated><id>https://blog.itanoss.kr/ko/imageviewec9790ec849c-selector-ec82acec9aa9ed9598eab8b0</id><content type="html" xml:base="https://blog.itanoss.kr/ko/imageview%EC%97%90%EC%84%9C-selector-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0/">&lt;p&gt;Android에서 버튼을 만들다보면 동적으로 풍부한 사용자 경험을 주고 싶을 때가 많습니다. 전통적으로 웹에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;a:hover&lt;/code&gt; 같은 녀석이 그렇습니다. 안드로이드에서도 ImageView를 이용해 이미지 버튼을 표현하고 이를 눌렀을 때나 선택되었을 때 등 다양한 상태에 대해서 각기 다른 drawable을 사용할 경우에 &lt;code class=&quot;highlighter-rouge&quot;&gt;selector&lt;/code&gt; 태그를 사용하기 마련인데, 쉽게 생각했다가 삽질을 많이 해서 정리해 보았습니다.&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;ImageView&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;android:id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;@+id/image_male&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;android:src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;@drawable/selector_ic_male&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;android:layout_width=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;wrap_content&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;android:layout_height=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;wrap_content&quot;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위와 같은 간단한 ImageView에 해당하는 &lt;code class=&quot;highlighter-rouge&quot;&gt;selector&lt;/code&gt;는 아래와 같이 지정합니다. (&lt;code class=&quot;highlighter-rouge&quot;&gt;clickable=&quot;true&quot;&lt;/code&gt; 를 지정하지 않아도 클릭이 가능합니다.)&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;selector&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;xmlns:android=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://schemas.android.com/apk/res/android&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;item&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;android:state_pressed=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;true&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;android:drawable=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;@drawable/ic_male_focused&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;item&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;android:state_focused=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;true&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;android:drawable=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;@drawable/ic_male_focused&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;item&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;android:state_selected=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;true&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;android:drawable=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;@drawable/ic_male_selected&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;item&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;android:drawable=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;@drawable/ic_male&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/selector&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;제일 중요한 점이, &lt;strong&gt;가장 하단에 기본 상태가 있어야&lt;/strong&gt; 정상동작합니다.&lt;/p&gt;

&lt;p&gt;세번째 상태인 &lt;strong&gt;선택되었을 경우&lt;/strong&gt;에는 다음과 같이 &lt;code class=&quot;highlighter-rouge&quot;&gt;onClick&lt;/code&gt; 이벤트에서 선택된 상태로 설정해주어야 합니다.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;@OnClick&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;image_male&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;clicked&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;ImageView&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setSelected&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name></name></author><category term="안드로이드" /><category term="ImageView" /><category term="pressed" /><category term="selected" /><category term="selector" /><category term="state" /><summary type="html">Android에서 버튼을 만들다보면 동적으로 풍부한 사용자 경험을 주고 싶을 때가 많습니다. 전통적으로 웹에서 a:hover 같은 녀석이 그렇습니다. 안드로이드에서도 ImageView를 이용해 이미지 버튼을 표현하고 이를 눌렀을 때나 선택되었을 때 등 다양한 상태에 대해서 각기 다른 drawable을 사용할 경우에 selector 태그를 사용하기 마련인데, 쉽게 생각했다가 삽질을 많이 해서 정리해 보았습니다.</summary></entry><entry><title type="html">Robolectric에서 BottomNavigationView 테스트하기</title><link href="https://blog.itanoss.kr/ko/robolectric%EC%97%90%EC%84%9C-bottomnavigationview-%ED%85%8C%EC%8A%A4%ED%8A%B8%ED%95%98%EA%B8%B0/" rel="alternate" type="text/html" title="Robolectric에서 BottomNavigationView 테스트하기" /><published>2017-02-02T10:38:53+09:00</published><updated>2017-02-02T10:38:53+09:00</updated><id>https://blog.itanoss.kr/ko/robolectricec9790ec849c-bottomnavigationview-ed858cec8aa4ed8ab8ed9598eab8b0</id><content type="html" xml:base="https://blog.itanoss.kr/ko/robolectric%EC%97%90%EC%84%9C-bottomnavigationview-%ED%85%8C%EC%8A%A4%ED%8A%B8%ED%95%98%EA%B8%B0/">&lt;p&gt;&lt;a href=&quot;https://developer.android.com/reference/android/support/design/widget/BottomNavigationView.html&quot;&gt;BottomNavigationView&lt;/a&gt;는 디자인 라이브러리 버전 25부터 사용할 수 있는 컴포넌트입니다. UX에서 끊임없이 토론( &lt;a href=&quot;https://lmjabreu.com/post/why-and-how-to-avoid-hamburger-menus/&quot;&gt;[1]&lt;/a&gt; &lt;a href=&quot;https://apptimize.com/blog/2015/07/the-ultimate-guide-to-the-hamburger-menu/&quot;&gt;[2]&lt;/a&gt; &lt;a href=&quot;https://medium.com/@kollinz/hamburger-menu-alternatives-for-mobile-navigation-a3a3beb555b8&quot;&gt;[3]&lt;/a&gt; )되고 있는 햄버거 메뉴에 대응하는 직관적인 UI컴포넌트이고, 심지어 &lt;a href=&quot;https://material.io/guidelines/components/bottom-navigation.html&quot;&gt;머테리얼 디자인 가이드&lt;/a&gt;에도 포함되어 있습니다.&lt;/p&gt;

&lt;p&gt;디자인 가이드에 따르면 BottomNavigationView는 3~5개의 메뉴를 표현하는 데 적합하고, 또한 menu resource로 내용을 표현하므로 어느 정도 계층을 분리하여 잘 설계된 컴포넌트로 보입니다. 나온지 얼마되지 않았기에 &lt;a href=&quot;http://jakewharton.github.io/butterknife/&quot;&gt;ButterKnife&lt;/a&gt;와 &lt;a href=&quot;http://robolectric.org/&quot;&gt;Robolectric&lt;/a&gt;에서 이에 대한 지원이 아직은 없습니다. 하지만 Robolectric에서는 &lt;a href=&quot;http://robolectric.org/custom-shadows/&quot;&gt;&lt;strong&gt;커스텀 섀도우 클래스&lt;/strong&gt;&lt;/a&gt; 확장을 지원하기 때문에 이를 이용하여 테스트가 가능합니다.&lt;/p&gt;

&lt;noscript&gt;&lt;pre&gt;400: Invalid request&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/c2b8fe3e1ba2f1864dcfb7d0de9d562f.js?file=someactivity.java&quot;&gt; &lt;/script&gt;

&lt;p&gt;위와 같이 BottomNavigationView가 포함된 액티비티가 있을 때, 테스트를 고려해보면 다음과 같은 두 가지 사항이 필요합니다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;현재 내비게이션에 선택된 메뉴 아이템이 무엇인지 알아내기&lt;/li&gt;
  &lt;li&gt;내비게이션에서 원하는 메뉴 아이템을 선택하기&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;이 두 가지 기능이 실제 클래스에 코드로 구현할 수 없기에 다음과 같이 섀도우 클래스가 필요합니다.&lt;/p&gt;

&lt;noscript&gt;&lt;pre&gt;400: Invalid request&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/c2b8fe3e1ba2f1864dcfb7d0de9d562f.js?file=shadowbottomnavigationview.java&quot;&gt; &lt;/script&gt;

&lt;p&gt;원하는 기능을 구현하기 위해 여러 방법이 있겠지만, 저는 MenuBuilder에 있는 아이템들을 뒤져서 체크되어있는 녀석만 골라서 그 아이템을 꺼내는 식으로 구현하였습니다. 덕분에 안드로이드 소스를 통째로 뒤졌지만, 내부적으로 toggle하는 방식으로 구현되어 있어 안전해보입니다. 두번째도 내부적으로는 지정된 리스너로 선택된 아이템을 트리거 해주는 로직이 있는데 실제 구현체로 이 기능을 전달하기에 private으로 선언되어 노출되지 않는 문제 등 여러가지로 인해 리스너를 지정할 때 섀도우 클래스에서 캐치하여 따로 갖고 있고, 나중에 선택하는 시점에 이 리스너를 트리거 해주는 방식으로 구현하였습니다.&lt;/p&gt;

&lt;noscript&gt;&lt;pre&gt;400: Invalid request&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/c2b8fe3e1ba2f1864dcfb7d0de9d562f.js?file=someactivitytest.java&quot;&gt; &lt;/script&gt;

&lt;p&gt;테스트 코드는 원하는 상황에 맞게 구현할 수 있었고, 주의해야할 점은 &lt;code class=&quot;highlighter-rouge&quot;&gt;@Config&lt;/code&gt; 어노테이션에 방금 만든 섀도우 클래스를 지정해야 하고, 테스트케이스에서 뷰를 꺼낼 때 캐스팅이 필요합니다.&lt;/p&gt;</content><author><name></name></author><category term="안드로이드" /><summary type="html">BottomNavigationView는 디자인 라이브러리 버전 25부터 사용할 수 있는 컴포넌트입니다. UX에서 끊임없이 토론( [1] [2] [3] )되고 있는 햄버거 메뉴에 대응하는 직관적인 UI컴포넌트이고, 심지어 머테리얼 디자인 가이드에도 포함되어 있습니다.</summary></entry><entry><title type="html">네이티브 지도앱 링크 달기</title><link href="https://blog.itanoss.kr/ko/%EB%84%A4%EC%9D%B4%ED%8B%B0%EB%B8%8C-%EC%A7%80%EB%8F%84%EC%95%B1-%EB%A7%81%ED%81%AC-%EB%8B%AC%EA%B8%B0/" rel="alternate" type="text/html" title="네이티브 지도앱 링크 달기" /><published>2017-01-24T21:29:51+09:00</published><updated>2017-01-24T21:29:51+09:00</updated><id>https://blog.itanoss.kr/ko/eb84a4ec9db4ed8bb0ebb88c-eca780eb8f84ec95b1-eba781ed81ac-eb8baceab8b0</id><content type="html" xml:base="https://blog.itanoss.kr/ko/%EB%84%A4%EC%9D%B4%ED%8B%B0%EB%B8%8C-%EC%A7%80%EB%8F%84%EC%95%B1-%EB%A7%81%ED%81%AC-%EB%8B%AC%EA%B8%B0/">&lt;p&gt;음식점이나 유명 명소 등이 표시된 웹 페이지에서 한 번쯤 어디쯤인지 어떻게 가는지 지도앱으로 검색해보았던 경험들이 한번씩은 다들 있으실 겁니다. 보통은 상호를 다시 타이핑해서 검색해서 찾기 마련인데, 링크를 누르면 해당 지점으로 지도앱이 열리면 편리하겠죠? 대한민국 대표 지도앱을 각각 플랫폼 별로 정리해보았습니다.&lt;/p&gt;

&lt;p&gt;이전에 위도와 경도를 알아야 하는데, 구글 맵에서 검색하면 URL에서 쉽게 알 수 있습니다. &lt;a href=&quot;https://www.google.co.kr/maps/place/%EC%B2%AD%EC%99%80%EB%8C%80/@37.5866076,126.9726223,17z&quot;&gt;이 곳&lt;/a&gt;을 예제로 하여 보여드리겠습니다.&lt;/p&gt;

&lt;p&gt;아래 URL Scheme 에 들어가 있는 값들을 아래와 같이 적절히 교체하여 사용하시면 되겠습니다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;LATITUDE&lt;/code&gt; : 위도&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;LONGITUDE&lt;/code&gt; : 경도&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;PLACE_NAME&lt;/code&gt; : 장소 명칭&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;android&quot;&gt;Android&lt;/h2&gt;

&lt;p&gt;사실 안드로이드는 고맙게도 범용 URL Scheme이 있습니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;geo:LATITUDE,LONGITUDE?q=PLACE_NAME
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;예: &lt;a href=&quot;geo:37.5866076,126.9726223?q=%EC%B2%AD%EC%99%80%EB%8C%80&quot;&gt;여기&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;안드로이드에서 해당 링크를 클릭하면 최초 아래와 같이 관련된 앱을 모두 보여주게 되고 사용자는 사용할 지도 앱을 선택할 수 있게 됩니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/ko/assets/images/2017-01-24/android-geo-intent.png&quot; alt=&quot;Android geo intent&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;ios&quot;&gt;iOS&lt;/h2&gt;

&lt;p&gt;애플 계열에는 앱 별로 URL scheme을 따로 지정해야 합니다. &lt;em&gt;(가나다 순으로 작성하겠습니다.)&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&quot;google-map&quot;&gt;Google Map&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;comgooglemaps://?q=PLACE_NAME&amp;amp;center=LATITUDE,LONGITUDE
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;예: &lt;a href=&quot;comgooglemaps://?q=%EC%B2%AD%EC%99%80%EB%8C%80&amp;amp;center=37.5866076,126.9726223&quot;&gt;여기&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;네이버-지도&quot;&gt;네이버 지도&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;navermaps://?menu=location&amp;amp;pinType=place&amp;amp;lat=LATITUDE&amp;amp;lng=LONGITUDE&amp;amp;title=PLACE_NAME
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;예: &lt;a href=&quot;navermaps://?menu=location&amp;amp;pinType=place&amp;amp;lat=37.5866076&amp;amp;lng=126.9726223&amp;amp;title=%EC%B2%AD%EC%99%80%EB%8C%80&quot;&gt;여기&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;다음-지도&quot;&gt;다음 지도&lt;/h3&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;daummaps://search?q=PLACE_NAME&amp;amp;p=LATITUDE,LONGITUDE
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;예: &lt;a href=&quot;daummaps://search?p=37.5866076,126.9726223&amp;amp;q=%EC%B2%AD%EC%99%80%EB%8C%80&quot;&gt;여기&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h4 id=&quot;reference&quot;&gt;Reference&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://developer.android.com/guide/components/intents-common.html#Maps&quot;&gt;Common Intents - Android Developers&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://developers.daum.net/services/apis/urlscheme/intro&quot;&gt;URL 스키마 안내 - Daum Developers&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://developers.google.com/maps/documentation/ios-sdk/urlscheme&quot;&gt;Launch Google Maps - Google Maps SDK for iOS&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="iOS" /><category term="안드로이드" /><category term="웹" /><summary type="html">음식점이나 유명 명소 등이 표시된 웹 페이지에서 한 번쯤 어디쯤인지 어떻게 가는지 지도앱으로 검색해보았던 경험들이 한번씩은 다들 있으실 겁니다. 보통은 상호를 다시 타이핑해서 검색해서 찾기 마련인데, 링크를 누르면 해당 지점으로 지도앱이 열리면 편리하겠죠? 대한민국 대표 지도앱을 각각 플랫폼 별로 정리해보았습니다.</summary></entry><entry><title type="html">Proxy for all platforms</title><link href="https://blog.itanoss.kr/ko/proxy-for-all-platforms/" rel="alternate" type="text/html" title="Proxy for all platforms" /><published>2016-11-25T11:18:05+09:00</published><updated>2016-11-25T11:18:05+09:00</updated><id>https://blog.itanoss.kr/ko/proxy-for-all-platforms</id><content type="html" xml:base="https://blog.itanoss.kr/ko/proxy-for-all-platforms/">&lt;p&gt;사내에 프록시 설정이 많아서 정리해보았습니다. &lt;strong&gt;계속 추가할 예정입니다.&lt;/strong&gt;&lt;/p&gt;

&lt;h1 id=&quot;debian-linux-ubuntu-&quot;&gt;Debian Linux (ubuntu, …)&lt;/h1&gt;

&lt;h2 id=&quot;proxy&quot;&gt;Proxy&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;/env/environment&lt;/code&gt; 파일에 다음을 추가해줍니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;http_proxy=&quot;http://corp.proxy:port/&quot;
https_proxy=&quot;http://corp.proxy:port/&quot;
no_proxy=&quot;localhost,127.0.0.1&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;root-certificate&quot;&gt;Root certificate&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo mkdir /usr/share/ca-certificates/extra
sudo cp foo.crt /usr/share/ca-certificates/extra/foo.crt
sudo dpkg-reconfigure ca-certificates
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;java&quot;&gt;Java&lt;/h1&gt;

&lt;h2 id=&quot;proxy-1&quot;&gt;Proxy&lt;/h2&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;/env/environment&lt;/code&gt; 파일에 다음을 추가해줍니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;JAVA_OPTS=&quot;-Dhttp.proxyHost=corp.proxy -Dhttp.proxyPort=port -Dhttp.nonProxyHosts=127.0.0.1|localhost-Dhttps.proxyHost=corp.proxy -Dhttps.proxyPort=port -Dhttps.nonProxyHosts=127.0.0.1|localhost&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;root-certificate-1&quot;&gt;Root certificate&lt;/h2&gt;

&lt;p&gt;JVM은 &lt;code class=&quot;highlighter-rouge&quot;&gt;$JAVA_HOME/jre/lib/security/cacerts&lt;/code&gt; 파일에 루트 인증서를 등록해야 합니다.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;keytool &lt;span class=&quot;nt&quot;&gt;-import&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-alias&lt;/span&gt; ALIAS_NAME &lt;span class=&quot;nt&quot;&gt;-keystore&lt;/span&gt; CACERTS_FILE &lt;span class=&quot;nt&quot;&gt;-trustcacerts&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-storepass&lt;/span&gt; changeit &lt;span class=&quot;nt&quot;&gt;-noprompt&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-file&lt;/span&gt; CRT_FILE
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;적절한 ALIAS_NAME, cacerts 파일 위치, 사내 인증서 파일 위치 등을 지정해야 합니다.&lt;/p&gt;

&lt;p&gt;JetBrain 계열의 IDE를 사용하면 내장 jre를 가지게 됩니다. 따라서 파일 시스템 내 전체 cacerts를 찾아서 일괄로 등록하려면 다음과 같이 하면 유용합니다.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;find / &lt;span class=&quot;nt&quot;&gt;-name&lt;/span&gt; cacerts &lt;span class=&quot;nt&quot;&gt;-exec&lt;/span&gt; keytool &lt;span class=&quot;nt&quot;&gt;-import&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-alias&lt;/span&gt; ALIAS_NAME &lt;span class=&quot;nt&quot;&gt;-keystore&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{}&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-trustcacerts&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-storepass&lt;/span&gt; changeit &lt;span class=&quot;nt&quot;&gt;-noprompt&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-file&lt;/span&gt; CRT_FILE &lt;span class=&quot;se&quot;&gt;\;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;python--pip&quot;&gt;Python / pip&lt;/h1&gt;

&lt;h2 id=&quot;proxy-2&quot;&gt;Proxy&lt;/h2&gt;

&lt;p&gt;전역 변수 선언으로 적용됩니다.&lt;/p&gt;

&lt;h2 id=&quot;root-certificate-2&quot;&gt;Root certificate&lt;/h2&gt;

&lt;p&gt;Add the following into &lt;code class=&quot;highlighter-rouge&quot;&gt;~/.pip/pip.conf&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[global]
cert = /usr/share/ca-certificates/extra/foo.crt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;composer&quot;&gt;&lt;a href=&quot;https://github.com/composer/composer&quot;&gt;Composer&lt;/a&gt;&lt;/h1&gt;

&lt;p&gt;PHP 의존 관리자&lt;/p&gt;

&lt;h2 id=&quot;proxy-3&quot;&gt;Proxy&lt;/h2&gt;

&lt;p&gt;전역 변수 선언으로 적용됩니다.&lt;/p&gt;

&lt;h2 id=&quot;root-certificate-3&quot;&gt;Root certificate&lt;/h2&gt;

&lt;p&gt;재미있게도 다음과 같이 설정해야 TLS 설정을 해제하여 의존 패키지 설치가 가능합니다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;export http_proxy=&quot;http://corp.proxy:port&quot;
export HTTP_PROXY=&quot;http://corp.proxy:port&quot;
export https_proxy=
export HTTPS_PROXY=
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;h4 id=&quot;reference&quot;&gt;Reference&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://askubuntu.com/questions/73287/how-do-i-install-a-root-certificate&quot;&gt;http://askubuntu.com/questions/73287/how-do-i-install-a-root-certificate&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.oracle.com/cd/E19159-01/820-4605/ablrb/index.html&quot;&gt;https://docs.oracle.com/cd/E19159-01/820-4605/ablrb/index.html&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/composer/composer/issues/3611&quot;&gt;Composer stopped working behind corporate proxy #3611&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="Python" /><category term="리눅스" /><summary type="html">사내에 프록시 설정이 많아서 정리해보았습니다. 계속 추가할 예정입니다.</summary></entry><entry><title type="html">python으로 docker 컨트롤하기</title><link href="https://blog.itanoss.kr/ko/python%EC%9C%BC%EB%A1%9C-docker-%EC%BB%A8%ED%8A%B8%EB%A1%A4%ED%95%98%EA%B8%B0/" rel="alternate" type="text/html" title="python으로 docker 컨트롤하기" /><published>2016-11-03T09:43:54+09:00</published><updated>2016-11-03T09:43:54+09:00</updated><id>https://blog.itanoss.kr/ko/pythonec9cbceba19c-docker-ecbba8ed8ab8eba1a4ed9598eab8b0</id><content type="html" xml:base="https://blog.itanoss.kr/ko/python%EC%9C%BC%EB%A1%9C-docker-%EC%BB%A8%ED%8A%B8%EB%A1%A4%ED%95%98%EA%B8%B0/">&lt;p&gt;&lt;a href=&quot;https://github.com/itanoss/noritor-core&quot;&gt;새로 시작한 개인 프로젝트&lt;/a&gt;는 python기반인데 docker를 이용한 sandbox 아키텍쳐가 필요해졌습니다. 때문에 python으로 작성된 docker client가 필요해서 찾아보니 &lt;a href=&quot;https://github.com/docker/docker-py&quot;&gt;docker-py&lt;/a&gt;를 발견하게 되었습니다. 일반적인 docker 쉘 커맨드와 동일한 기능을 docker-py를 이용해서 거의 모두 사용할 수 있는데 이를 이용해서 python으로는 어떻게 작성하는 지 정리해보겠습니다.&lt;/p&gt;

&lt;h1 id=&quot;초기화&quot;&gt;초기화&lt;/h1&gt;

&lt;p&gt;제일 처음 해야 할 것은 로컬에 있는 docker daemon과 연동해야 하는데 docker-py에서는 Client라는 인스턴스를 생성하고 이에 내재된 다양한 API를 통해 컨트롤이 가능합니다.&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;docker&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Client&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;cli&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Client&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;인자를 주지 않고 인스턴스를 생성하면 기본적으로 로컬로 접근하게 됩니다. &lt;code class=&quot;highlighter-rouge&quot;&gt;base_url&lt;/code&gt;이라는 인자로 외부 daemon과 연동도 가능한 듯 하네요.&lt;/p&gt;

&lt;h1 id=&quot;docker-pull&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;docker pull&lt;/code&gt;&lt;/h1&gt;

&lt;p&gt;docker hub에서 이미지를 다운로드합니다.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;cli&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Client&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;base_url&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'tcp://127.0.0.1:2375'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cli&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pull&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'busybox'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dumps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;loads&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;indent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# { &quot;status&quot;: &quot;Pulling image (latest) from busybox&quot;, &quot;progressDetail&quot;: {}, &quot;id&quot;: &quot;e72ac664f4f0&quot; }
# { &quot;status&quot;: &quot;Pulling image (latest) from busybox, endpoint: ...&quot;, &quot;progressDetail&quot;: {}, &quot;id&quot;: &quot;e72ac664f4f0&quot; }
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;인자에 &lt;code class=&quot;highlighter-rouge&quot;&gt;stream=True&lt;/code&gt;로 설정하면 string generator로 리턴되고 &lt;code class=&quot;highlighter-rouge&quot;&gt;False&lt;/code&gt;로 설정하거나 설정하지 않으면 string으로 리턴됩니다.&lt;/p&gt;

&lt;h1 id=&quot;docker-run&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;docker run&lt;/code&gt;&lt;/h1&gt;
&lt;p&gt;docker를 사용하면서 가장 쓰는 명령어가 컨테이너를 기동하는 명령어인 run일텐데요. docker-py에서는  컨테이너를 생성하고(&lt;code class=&quot;highlighter-rouge&quot;&gt;.create_container()&lt;/code&gt;) 시작하는(&lt;code class=&quot;highlighter-rouge&quot;&gt;.start()&lt;/code&gt;) 절차로 진행할 수 있습니다.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;container&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cli&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;create_container&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'busybox:latest'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;command&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'/bin/sleep 30'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;container&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# {'Id': '8a61192da2b3bb2d922875585e29b74ec0dc4e0117fcbf84c962204e97564cd7', 'Warnings': None}
&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;response&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cli&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;container&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;container&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Id'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# None
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;command line에서 컨테이너를 기동할 때 다양한 옵션을 줄 수 있는데 자주 쓰는 옵션들만 소개해보겠습니다.&lt;/p&gt;

&lt;h2 id=&quot;docker-run--p&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;docker run -p&lt;/code&gt;&lt;/h2&gt;
&lt;blockquote&gt;
  &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-p, -publish=[]&lt;/code&gt; : 호스트에 연결된 컨테이너의 특정 포트를 외부에 노출합니다. 보통 웹 서버의 포트를 노출할 때 주로 사용합니다.&lt;/p&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;호스트 포트&amp;gt;:&amp;lt;컨테이너 포트&amp;gt;&lt;/code&gt; 예) &lt;code class=&quot;highlighter-rouge&quot;&gt;-p 80:80&lt;/code&gt;&lt;/li&gt;
    &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;IP 주소&amp;gt;:&amp;lt;호스트 포트&amp;gt;:&amp;lt;컨테이너 포트&amp;gt;&lt;/code&gt; 호스트에 네트워크 인터페이스가 여러 개이거나 IP 주소가 여러 개 일 때 사용합니다. 예) &lt;code class=&quot;highlighter-rouge&quot;&gt;-p 192.168.0.10:80:80&lt;/code&gt;&lt;/li&gt;
    &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;IP 주소&amp;gt;::&amp;lt;컨테이너 포트&amp;gt;&lt;/code&gt; 호스트 포트를 설정하지 않으면 호스트의 포트 번호가 무작위로 설정됩니다. 예) &lt;code class=&quot;highlighter-rouge&quot;&gt;-p 192.168.0.10::80&lt;/code&gt;&lt;/li&gt;
    &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;컨테이너 포트&amp;gt;&lt;/code&gt; 컨테이너 포트만 설정하면 호스트의 포트 번호가 무작위로 설정됩니다. 예) &lt;code class=&quot;highlighter-rouge&quot;&gt;-p 80&lt;/code&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;docker-py에서는 &lt;code class=&quot;highlighter-rouge&quot;&gt;host_config&lt;/code&gt;를 생성해서 포트 바인딩해줍니다.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;container&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cli&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;create_container&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;'busybox'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'ls'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1111&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2222&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;host_config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cli&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;create_host_config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;port_bindings&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;mi&quot;&gt;1111&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4567&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;mi&quot;&gt;2222&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;mi&quot;&gt;3333&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1234&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5678&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위 코드는 다음과 같이 네트워크 설정을 하게 됩니다.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;컨테이너 1111번 포트를 호스트 4567번 포트로 bind&lt;/li&gt;
  &lt;li&gt;컨테이너 2222번 포트는 개방하지 않음&lt;/li&gt;
  &lt;li&gt;컨테이너 3333번 포트를 호스트 1234번 포트와 5678번 포트로 bind&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;포트 바인딩에 대해서 더 자세한 설정은 &lt;a href=&quot;https://docker-py.readthedocs.io/en/stable/port-bindings/&quot;&gt;여기&lt;/a&gt;를 참고해주세요.&lt;/p&gt;

&lt;h2 id=&quot;docker-run---link&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;docker run --link&lt;/code&gt;&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;--link=[]&lt;/code&gt; : 컨테이너끼리 연결합니다. &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;컨테이너 이름&amp;gt;:&amp;lt;별칭&amp;gt;&lt;/code&gt; 형식입니다.&lt;/p&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;--link=&quot;db:db&quot;&lt;/code&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;포트 바인딩에서 했던 것처럼 &lt;code class=&quot;highlighter-rouge&quot;&gt;host_config&lt;/code&gt;를 생성해서 링크를 설정합니다. 다음 예를 보시죠.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;container&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cli&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;create_container&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;'busybox'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'ls'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1111&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2222&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;host_config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cli&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;create_host_config&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;links&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;db_container&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Id'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'db'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)])&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이제  busybox 컨테이너 안에서 데이터베이스 컨테이너를 접근할 때 db라는 URL로 접근이 가능합니다. (예: &lt;code class=&quot;highlighter-rouge&quot;&gt;mongo://db:27017&lt;/code&gt; )&lt;/p&gt;

&lt;h1 id=&quot;docker-ps&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;docker ps&lt;/code&gt;&lt;/h1&gt;

&lt;p&gt;컨테이너 목록을 출력합니다.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;cli&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;containers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# [{'Command': '/bin/sleep 30',
#  'Created': 1412574844,
#  'Id': '6e276c9e6e5759e12a6a9214efec6439f80b4f37618e1a6547f28a3da34db07a',
#  'Image': 'busybox:buildroot-2014.02',
#  'Names': ['/grave_mayer'],
#  'Ports': [],
#  'Status': 'Up 1 seconds'}]
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;docker-stop&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;docker stop&lt;/code&gt;&lt;/h1&gt;

&lt;p&gt;기동된 컨테이너를 중지합니다.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;cli&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;container&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'id'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;em&gt;프로젝트를 진행하며 계속 추가하도록 하겠습니다~~&lt;/em&gt; 🙂&lt;/p&gt;

&lt;p&gt;프로젝트에서 사용한 것을 위주로 작성하였고, 이 밖에 전체 기능에 대해서는 &lt;a href=&quot;https://docker-py.readthedocs.io/en/stable/&quot;&gt;공식 문서&lt;/a&gt;를 참고해주세요.&lt;/p&gt;

&lt;hr /&gt;

&lt;h4 id=&quot;reference&quot;&gt;Reference&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://docker-py.readthedocs.io/en/stable/&quot;&gt;docker-py Documentation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.pyrasis.com/book/DockerForTheReallyImpatient/Chapter20/28&quot;&gt;가장 빨리 만나는 Docker 20장 - 28. run&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><category term="docker" /><category term="Python" /><summary type="html">새로 시작한 개인 프로젝트는 python기반인데 docker를 이용한 sandbox 아키텍쳐가 필요해졌습니다. 때문에 python으로 작성된 docker client가 필요해서 찾아보니 docker-py를 발견하게 되었습니다. 일반적인 docker 쉘 커맨드와 동일한 기능을 docker-py를 이용해서 거의 모두 사용할 수 있는데 이를 이용해서 python으로는 어떻게 작성하는 지 정리해보겠습니다.</summary></entry></feed>